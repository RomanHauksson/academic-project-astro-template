---
// https://github.com/mozilla/pdf.js/blob/master/examples/node/pdf2png/pdf2png.mjs

import fs from "fs";
import { getDocument } from "pdfjs-dist/legacy/build/pdf.mjs";
import { Image } from "astro:assets";

interface Props {
  filename: string;
  altText: string;
}

const { filename, altText } = Astro.props;

const data = new Uint8Array(fs.readFileSync(`./src/assets/${filename}`));

// Where the standard fonts are located.
const STANDARD_FONT_DATA_URL = "../../node_modules/pdfjs-dist/standard_fonts/";

const loadingTask = getDocument({
  data,
  standardFontDataUrl: STANDARD_FONT_DATA_URL,
});
const pdfDocument = await loadingTask.promise;
const page = await pdfDocument.getPage(1);
const viewport = page.getViewport({ scale: 1 });
const width = viewport.width;
const height = viewport.height;

// Render the page on a Node canvas with 100% scale.
const canvasFactory = pdfDocument.canvasFactory as any;
const canvasAndContext = canvasFactory.create(width, height);
const renderContext = {
  canvasContext: canvasAndContext.context,
  viewport,
  canvas: canvasAndContext.canvas,
};

const renderTask = page.render(renderContext);
await renderTask.promise;

// Convert the canvas to an image buffer and create data URI.
const imageBuffer = canvasAndContext.canvas.toBuffer("image/png");

// Release page resources.
page.cleanup();
---

<Image
  class="rounded-lg max-h-[35rem] w-max object-contain !px-0"
  src={`data:image/png;base64,${imageBuffer.toString("base64")}`}
  alt={altText}
  width={width}
  height={height}
  layout="full-width"
/>
